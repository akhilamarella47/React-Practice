Code GYM


<source src="URL" type="MIME-type">
src: specifies the path to the multimedia file
type: specifies the file type and its MIME type. This helps the browser determine if it supports this format
<video controls>
  <source src="movie.mp4" type="video/mp4">
  <source src="movie.webm" type="video/webm">
  <source src="movie.ogv" type="video/ogg">
  Your browser does not support video playback.
</video>
<picture> -->It provides multiple image sources,allow them to choose  the most appropriate image 
<track>--> element is used to add text tracks to multimedia content, like subtitles, captions
Pseudo-classes are applied to elements based on their state or position in the document structure. They help style elements in various situations like when the mouse hovers over them. Pseudo-classes begin with a colon (:).
The pseudo-class :focus applies to an element when it gets focus, like when clicking on an input field.

CSS
input:focus {
  outline-color: blue;
}
The pseudo-element ::before inserts content before an element's content.
<p>My name is Stepan.</p>
CSS
p::before {
  content: "Hello! ";
  color: blue;
}
The pseudo-element ::after inserts content after an element's content.

HTML
<p>Attention!</p>
CSS
p::after {
  content: " Thank you for your attention!";
  color: red;
}
The pseudo-element ::first-line applies to the first line of an element. It lets you style just the first line of text

<p>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
</p>
CSS
::selection {
  background-color: blue;
  color: yellow;
} when we choos ethe text it will change to different color

Forms:

form action="/search" method="get">
  <label for="query">Search:</label>
  <input type="text" id="query" name="query">
  <button type="submit">Search</button>
</form>

This method is suitable for sending small amounts of data and should not be used for confidential information.



<form action="/submit" method="post">
  <label for="username">Username:</label>
  <input type="text" id="username" name="username" required>
  <br>
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" required>
  <br>
  <button type="submit">Submit</button>
</form>
This method is suitable for sending small amounts of data and should not be used for confidential information.

<fieldset disabled>
  <legend>Disabled Group</legend>
  <label for="disabled-field">This field is disabled:</label>
  <input type="text" id="disabled-field" name="disabled-field">
</fieldset>
Attribute disabled: makes all elements inside <fieldset> unavailable to the user (they cannot be changed and will not be submitted to the server).

The <optgroup> element is used to group related options within a <select> element. It allows you to logically divide options into categories, making the dropdown list more organized and understandable.

Usage example:

HTML
<select name="car">
  <optgroup label="German Cars">
    <option value="mercedes">Mercedes</option>
    <option value="audi">Audi</option>
    <option value="bmw">BMW</option>
  </optgroup>
  <optgroup label="Japanese Cars">
    <option value="toyota">Toyota</option>
    <option value="honda">Honda</option>
    <option value="nissan">Nissan</option>
  </optgroup>
</select>


forms:
form id="my-form">
  <label for="name">Name:</label>
  <br>
  <input type="text" id="name" name="name">
  <br><br>
  <label for="email">Email:</label>
  <br>
  <input type="email" id="email" name="email">
  <br><br>
  <label for="password">Password:</label>
  <br>
  <input type="password" id="password" name="password">
  <div style="margin-top: 10px">
    <button type="reset">Reset</button>
  </div>
</form>
<p id="log"></p>

const form = document.getElementById('my-form');
const log = document.getElementById('log');

form.addEventListener('reset', function () {
  log.textContent = 'Form has been reset!';
});
blur,focus
he select event occurs when a user selects text in a form element, like an input field or textarea. This event can be useful for performing actions when text is selected, such as showing a copy button.

Example of handling the select event:
The :focus pseudo-class is applied to a form element when it gains focus
Microdata (structured data) is used to provide search engines with additional info about page content. This helps search engines better understand the content and enhances the page's visibility in search results.

Example schemas (Schema.org):

Article: for articles and news
BreadcrumbList: for breadcrumbs
Product: for describing products
Event: for describing events
Example of microdata usage:

Breadcrumbs are navigation elements that show the user's path from the homepage to the current page. They help users easily navigate the site by providing links to previous navigation levels. Breadcrumbs are a crucial part of the user interface, especially for large sites with deep page hierarchies.

Main aspects of breadcrumbs

Breadcrumbs are a string of links usually displayed at the top of the page under the header or menu. Each link in the chain leads to one of the pages the user passed through to get to the current page.

HTML
<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/home">Home</a></li>
    <li class="breadcrumb-item"><a href="/category">Category</a></li>
    <li class="breadcrumb-item active" aria-current="page">Current Page</li>
  </ol>
</nav>








Selectors that I don't know:
There are several types of combined selectors in CSS: descendant, child, adjacent sibling, and general sibling.
The descendant selector targets all elements that are descendants of a specified element. Descendants include any elements contained within the specified element at any level of nesting (not just children, but also grandchildren, great-grandchildren, and so on).
div p {
  color: blue;
}
The child selector selects only those elements that are direct children of a specified parent.
/* Selects only <p> elements that are direct children of .container */
.container > p {
  color: green;
}
<div class="container">
  <p>This paragraph will be green.</p>
  <div class="wrapper">
    <p>This paragraph won't be green because it's not a direct child of .container.</p>
  </div>
  <p>This paragraph will be green.</p>
</div>
<p>This paragraph will not be green.</p>
The adjacent sibling selector selects an element that directly follows a specified element and is on the same level of nesting.
* Selects <p> that directly follows <h1> */
h1 + p {
  color: red;
}
<h1>Heading 1</h1>
<p>This paragraph will be red because it directly follows "h1".</p>
<p>This paragraph will not be red.</p>
The general sibling selector selects all elements that follow a specified element and are on the same level of nesting.
/* Selects all <p> elements that follow <h1> on the same nesting level */

h1 ~ p {
  color: purple;
}

important:
Attribute Selector
Attribute Selector with Value
Attribute Selector with Prefix
Attribute Selector with Suffix
Attribute Selector with Substring
Attribute Selector with Whitespace
Attribute Selector with Hyphen



Psuedo classes:
Pseudo-classes in CSS are special keywords added to selectors to specify the state of an element or its position in the document structure.
State pseudo-classes
Structural state pseudo-classes
Form pseudo-classes
Navigation pseudo-classes
selector:pseudo-class {
  property: value;
  property: value;
}
:hover — applied when a user hovers over an element
:active — applied when an element is activated (usually on click)
:focus — applied when an element is focused (e.g., using the keyboard)
:visited — applied to visited links
:link — applied to unvisited links
The :nth-child pseudo-class targets elements based on their position among siblings. It takes an argument that can be a number, keyword, or expression.
/* Styles all odd children */
li:nth-child(odd) {
    background-color: lightgray;
}

/* Styles all even children */
li:nth-child(even) {
    background-color: lightblue;
}

/* Styles the second child */
li:nth-child(2) {
    color: red;
}
<ul>
  <li>Element 1</li>
  <li>Element 2</li>
  <li>Element 3</li>
  <li>Element 4</li>
  <li>Element 5</li>
  <li>Element 6</li>
  <li>Element 7</li>
</ul>

Psuedo-elements:

Pseudo-elements in CSS let you style specific parts of elements, like the first letter, first line, or add content before or after an element. 
::before
::after
::first-letter
::first-line


Using Variables
To use variables, the var() function is applied, which takes the variable name as an argument.

Syntax:

selector {
  property: var(--variable-name);
  property: var(--variable-name);
}

The flex property is a shorthand to set flex-grow, flex-shrink, and flex-basis. It allows you to manage all three aspects of space distribution in a single property.

Syntax:

.container {
  flex: [flex-grow] [flex-shrink] [flex-basis];
}

Grid

flex: 1 1 calc(33.333% - 40px);to align the item of 3 elements in a row



Background properties:
background-image:ur('');
background-repeat:top right.bottom left;
background-repeat:no-repat,repeat-x;repeat-y,no-repeat;
bacground-size:cover,contain,auto;
 background: linear-gradient(to bottom, blue, green);
background: radial-gradient(circle, red, yellow);
box-shadow: offset-x offset-y blur-radius spread-radius color;

The clear property is used to control the wrapping behavior around floating elements. It allows you to prevent an element from being wrapped by floating elements on a certain side.

Syntax:

.element {
  clear: left; /* or right */
}

To display the element in the center
display: grid;: sets the container as a CSS Grid
place-items: center;: centers the elements both horizontally and vertically



/* Apply styles if the screen width is less than or equal to 768px */

@media (max-width: 768px) {
  .container {
    padding: 10px;
  }
}

/* Apply styles if the screen height is greater than 800px */

@media (min-height: 800px) {
  .header {
    height: 150px;
  }
}
/* Apply styles for devices with a screen width between 600px and 1200px */

@media (min-width: 600px) and (max-width: 1200px) {
  .main-content {
    margin: 0 auto;
    width: 80%;
  }
}
/* Apply styles for all devices except those with screen width less than 600px */

@media not all and (max-width: 600px) {
  .footer {
    display: block;
  }
}
/* Apply styles only for screens */

@media only screen and (max-width: 768px) {
  .menu {
    display: none;
  }
}



display: flex: defines an element as a flex container
flex-direction: sets the direction of the flex items (row, column, row-reverse, column-reverse)
justify-content: controls alignment of flex items along the main axis (flex-start, flex-end, center, space-between, space-around)
align-items: controls alignment of flex items along the cross axis (stretch, flex-start, flex-end, center, baseline)


Grid properties:
grid-template-columns: repeat(3, 1fr);make the element 2 rows and 3 columns
        grid-template-rows: repeat(2, 1fr);



Images:
The srcset attribute is used to specify a bunch of image sources with different sizes or resolutions. The browser picks the most suitable one depending on the user's device.

Syntax:

<img src="default.jpg" srcset="image1.jpg 1x, image2.jpg 2x" alt="Example Image">
src: specifies the default image path
srcset: contains a list of images and their properties separated by commas
1x, 2x: indicate the scale factor (like 1x for standard resolution and 2x for high pixel density devices)
Example of using srcset:
<img src="default.jpg"
srcset="image1.jpg 480w, image2.jpg 800w"
sizes="(max-width: 600px) 480px, 800px"
alt="Example Image">

.background {
  background-image: url('images/background-1x.jpg');
}

@media only screen and (min-resolution: 2dppx) {
  .background {
    background-image: url('images/background-2x.jpg');
  }
}

@media only screen and (min-resolution: 3dppx) {
  .background {
    background-image: url('images/background-3x.jpg');
  }
}
Code Explanation:

.background: defines the base background image
@media only screen and (min-resolution: 2dppx): changes the background image to a version for 2x density screens
@media only screen and (min-resolution: 3dppx): swaps the background image for a version tailored to 3x density screens
src="images/default.jpg"
      srcset="images/image-1x.jpg 1x,
        images/image-2x.jpg 2x,
        images/image-3x.jpg 3x"makes the image 2x,3s etc
      sizes="(max-width: 600px) 100vw,
        (max-width: 1200px) 50vw, 33vw"
      alt="Example Image for Retina Displays">

/* Basic styles for mobile devices */

body {
  font-family: Arial, sans-serif;
  padding: 10px;
}

header, main, footer {
  margin: 10px 0;
}

header {
  text-align: center;
}

/* Styles for larger screens */

@media (min-width: 768px) {
  body {
    padding: 20px;
  }

  header, main, footer {
    margin: 20px 0;
  }

  header {
    text-align: left;
  }
}

@media (min-width: 1024px) {
  body {
    padding: 30px;
  }

  header, main, footer {
    margin: 30px 0;
  }
}




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Responsive Gallery</title>
    <style>
    .gallery {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
      }

      .gallery img {
        flex: 1 1 calc(33.333% - 10px);
        max-width: calc(33.333% - 10px);
        height: auto;
      }

      @media (max-width: 768px) {
        .gallery img {
          flex: 1 1 calc(50% - 10px);
          max-width: calc(50% - 10px);
        }
      }

      @media (max-width: 480px) {
        .gallery img {
          flex: 1 1 100%;
          max-width: 100%;
        }
      }

    </style>
</head>
<body>
    <div class="gallery">
        <img src="image1.jpg" alt="Image 1">
        <img src="image2.jpg" alt="Image 2">
        <img src="image3.jpg" alt="Image 3">
        <img src="image4.jpg" alt="Image 4">
        <img src="image5.jpg" alt="Image 5">
        <img src="image6.jpg" alt="Image 6">
    </div>
</body>
</html>
Important learn definitely for responsive websites





<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS Grid Example</title>
    <style>
      .container {
        display: grid;
        grid-template-columns: 1fr 2fr 1fr;
        grid-template-rows: 100px 200px;
        gap: 10px;
      }

      .item {
        background-color: lightblue;
        padding: 20px;
        text-align: center;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="item">Item 1</div>
      <div class="item">Item 2</div>
      <div class="item">Item 3</div>
      <div class="item">Item 4</div>
      <div class="item">Item 5</div>
      <div class="item">Item 6</div>
    </div>
  </body>
</html> Refer the code don't forget


grid-auto-flow: row;

grid-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* Three equal columns */
}

.item1 {
        background-color: lightblue;
        grid-row: 1 / 3; /* The element occupies the first and second rows */
        grid-column: 1 / 3; /* The element occupies the first and second columns */
      }
item2 {
        background-color: lightgreen;
        grid-row: 3 / 5; /* The element occupies the third and fourth rows */
        grid-column: 2 / 5; /* The element occupies the second, third, and fourth columns */
      }





.grid-container {
  display: grid;
  grid-template-areas:
    "header header header"
    "sidebar main main"
    "footer footer footer";
  grid-gap: 10px;
}

.header {
  grid-area: header;
  background-color: #2ecc71;
  padding: 20px;
  text-align: center;
}

.sidebar {
  grid-area: sidebar;
  background-color: #3498db;
  padding: 20px;
  text-align: center;
}

.main {
  grid-area: main;
  background-color: #9b59b6;
  padding: 20px;
  text-align: center;
}

.footer {
  grid-area: footer;
  background-color: #e74c3c;
  padding: 20px;
  text-align: center;
}
HTML
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grid Areas Example</title>
    <link rel="stylesheet" href="styles.css">
  </head>
  <body>
    <div class="grid-container">
      <div class="header">Header</div>
      <div class="sidebar">Sidebar</div>
      <div class="main">Main Content</div>
      <div class="footer">Footer</div>
    </div>
  </body>
</html>


@media (min-width: 600px) {
  .grid-container {
    grid-template-columns: repeat(2, 1fr); /* Two columns */
  }
}

/* For screens wider than 900px */

@media (min-width: 900px) {
  .grid-container {
    grid-template-columns: repeat(3, 1fr); /* Three columns */
  }
}



/* Base style for all screens */

.grid-container {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-auto-rows: 100px;
  gap: 10px;
}

.grid-item {
  background-color: #3498db;
  color: white;
  padding: 20px;
  text-align: center;
  border: 1px solid #fff;
}

/* For screens wider than 600px */

@media (min-width: 600px) {
  .grid-container {
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: 150px;
  }
}

/* For screens wider than 900px */

@media (min-width: 900px) {
  .grid-container {
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: 200px;
  }
}
HTML
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Adaptive Sizes with CSS Grid</title>
    <link rel="stylesheet" href="styles.css">
  </head>
  <body>
    <div class="grid-container">
      <div class="grid-item item1">Element 1</div>
      <div class="grid-item item2">Element 2</div>
      <div class="grid-item item3">Element 3</div>
      <div class="grid-item item4">Element 4</div>
      <div class="grid-item item5">Element 5</div>
      <div class="grid-item item6">Element 6</div>
    </div>
  </body>
</html>


/* Styling the first list item */

li:first-child {
  font-weight: bold;
  color: red;
}

/* Styling the first paragraph in a div */

div p:first-child {
  text-transform: uppercase;
/* Styling odd list items */

li:nth-child(odd) {
  background-color: #f0f0f0;
}
Example 2: Selecting Elements at a Specific Position

In this example, the third list item is bolded and colored green:

CSS
/* Styling the third list item */

li:nth-child(3) {
  font-weight: bold;
  color: green;
}
* Styling selected checkbox */

input[type="checkbox"]:checked {
  background-color: #3498db;
}

/* Styling selected radio button */

input[type="radio"]:checked {
  background-color: #2ecc71;
}

/* Styling disabled input field */

input:disabled {
  background-color: #f0f0f0;
  border-color: #ccc;
  color: #888;
}

/* Styling disabled button */

button:disabled {
  background-color: #d0d0d0;
  color: #777;
  cursor: not-allowed;
}

/* Styling enabled input field */

input:enabled {
  background-color: #fff;
  border-color: #3498db;
}

/* Styling the first line of the first paragraph inside a div */

div p:first-child::first-line {
  font-weight: bold;
  color: #2ecc71;
}

/* Adding a decorative element after the last list item */

ul li:last-child::after {
  content: "❦";
  display: inline-block;
  margin-left: 10px;
  color: #e74c3c;
}

/* Styling even list items on hover */

ul li:nth-child(even):hover {
  background-color: #f0f0f0;
  color: #3498db;
}

/* Adding an icon before a link on focus */

a:focus::before {
  content: "🔗 ";
  color: #3498db;
}

/* Styling the first letter of a paragraph on hover */

p:hover::first-letter {
  font-size: 2em;
  color: #e74c3c;
}


/* Styling enabled button */

button:enabled {
  background-color: #2ecc71;
  color: white;
  cursor: pointer;
}

/* Styling invalid input field */

input:invalid {
  border-color: #e74c3c;
  background-color: #f9e0e0;
}

/* Styling invalid text area */

textarea:invalid {
  border-color: #e74c3c;
  background-color: #f9e0e0;
}
